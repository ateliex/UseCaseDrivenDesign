<Window
    x:Class="Ateliex.Modulos.Decisoes.Comerciais.PlanejamentoComercial.PlanejamentoComercialWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ateliex="clr-namespace:Ateliex"
    xmlns:consultaDePlanosComerciais="clr-namespace:Ateliex.Modulos.Decisoes.Comerciais.ConsultaDePlanosComerciais;assembly=Ateliex.Modulos.Application"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:decisoesComerciais="clr-namespace:Ateliex.Modulos.Decisoes.Comerciais;assembly=Ateliex.Modulos.Domain"
    xmlns:local="clr-namespace:Ateliex.Modulos.Decisoes.Comerciais.PlanejamentoComercial"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:planos="clr-namespace:Ateliex.Modulos.Decisoes.Comerciais;assembly=Ateliex.Modulos.Domain"
    xmlns:system="clr-namespace:System;assembly=System.Xaml.Extensions"
    Title="Planos Comerciais"
    Width="1193"
    Height="795"
    xml:lang="pt-BR"
    Loaded="Window_Loaded"
    mc:Ignorable="d">
    <Window.Resources>
        <ResourceDictionary>
            <CollectionViewSource x:Key="planosComerciaisViewSource" d:DesignSource="{d:DesignInstance {x:Type consultaDePlanosComerciais:ItemDeConsultaDePlanosComerciais}, CreateList=True}" />
            <CollectionViewSource x:Key="custosViewSource" Source="{Binding Custos, Source={StaticResource planosComerciaisViewSource}}" />
            <CollectionViewSource x:Key="itensViewSource" Source="{Binding Itens, Source={StaticResource planosComerciaisViewSource}}" />
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Menu Grid.ColumnSpan="2" VerticalAlignment="Top">
            <MenuItem Header="Registro">
                <MenuItem Header="Novo Plano Comercial ..." />
                <Separator />
                <MenuItem Header="Salvar" InputGestureText="Ctrl+S" />
                <Separator />
                <MenuItem Header="Fechar" />
            </MenuItem>
        </Menu>
        <ToolBar
            Grid.Row="1"
            Grid.ColumnSpan="2"
            VerticalAlignment="Top">
            <Button>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Novo Plano Comercial ..." />
                </StackPanel>
            </Button>
            <Separator />
            <Button x:Name="saveButton" ToolTip="Salvar" />
        </ToolBar>
        <Grid
            Grid.Row="2"
            Grid.ColumnSpan="2"
            Margin="0"
            DataContext="{StaticResource planosComerciaisViewSource}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="7*" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="9*" />
            </Grid.ColumnDefinitions>
            <DataGrid
                x:Name="planosComerciaisDataGrid"
                AutoGenerateColumns="False"
                Background="{x:Null}"
                EnableRowVirtualization="True"
                ItemsSource="{Binding}"
                SelectionUnit="FullRow">
                <DataGrid.Resources>
                    <ateliex:ConvertItemToIndex x:Key="IndexConverter" />
                </DataGrid.Resources>
                <!--<DataGrid.RowHeaderTemplate>
                    <DataTemplate>
                        <StackPanel HorizontalAlignment="Right">
                            <TextBlock
                                Width="Auto"
                                HorizontalAlignment="Right"
                                Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=Header}"
                            />
                        </StackPanel>
                    </DataTemplate>
                </DataGrid.RowHeaderTemplate>-->
                <!--<DataGrid.RowHeaderTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=.,
                            RelativeSource={RelativeSource AncestorType=DataGridRow},
                            Converter={StaticResource IndexConverter}}"></TextBlock>
                    </DataTemplate>
                </DataGrid.RowHeaderTemplate>-->
                <!--<DataGrid.RowHeaderStyle>
                    <Style TargetType="{x:Type DataGridRowHeader}">
                        <Setter Property="MinWidth" Value="30"/>
                        <Setter Property="Content" Value="{Binding Converter={StaticResource IndexConverter}}" />
                    </Style>
                </DataGrid.RowHeaderStyle>-->
                <DataGrid.RowValidationRules>
                    <local:PlanoComercialValidationRule ValidationStep="UpdatedValue" />
                </DataGrid.RowValidationRules>
                <DataGrid.Columns>
                    <!--<DataGridTextColumn x:Name="idColumn" IsReadOnly="True" Header="Id" Binding="{Binding Id}"/>-->
                    <DataGridTextColumn
                        x:Name="nomeColumn"
                        Width="*"
                        MinWidth="72"
                        Binding="{Binding Nome, ValidatesOnExceptions=True}"
                        Header="Nome" />
                    <DataGridTextColumn
                        x:Name="rendaBrutaMensalColumn"
                        Width="72"
                        Binding="{Binding RendaBrutaMensal, StringFormat={}{0:n2}}"
                        CellStyle="{StaticResource RightStyle}"
                        Header="RBM (R$)" />
                    <DataGridTextColumn
                        x:Name="custoFixoTotalColumn"
                        Width="72"
                        Binding="{Binding CustoFixoTotal, StringFormat={}{0:n2}, Mode=OneWay}"
                        CellStyle="{StaticResource RightStyle}"
                        Header="CF (R$)" />
                    <DataGridTextColumn
                        x:Name="custoFixoPercentualTotalColumn"
                        Width="72"
                        Binding="{Binding CustoFixoPercentualTotal, Mode=OneWay, StringFormat={}{0:n2}}"
                        CellStyle="{StaticResource RightStyle}"
                        Header="CF (%)" />
                    <DataGridTextColumn
                        x:Name="custoVariavelTotalColumn"
                        Width="72"
                        Binding="{Binding CustoVariavelTotal, Mode=OneWay, StringFormat={}{0:n2}}"
                        CellStyle="{StaticResource RightStyle}"
                        Header="CV (R$)" />
                    <DataGridTextColumn
                        x:Name="custoVariavelPercentualTotalColumn"
                        Width="72"
                        Binding="{Binding CustoVariavelPercentualTotal, Mode=OneWay, StringFormat={}{0:n2}}"
                        CellStyle="{StaticResource RightStyle}"
                        Header="CV (%)" />
                    <!--<DataGridTextColumn x:Name="stateColumn" IsReadOnly="True" Header="State" Binding="{Binding State}"/>-->
                </DataGrid.Columns>
            </DataGrid>
            <GridSplitter
                Grid.Column="1"
                Width="5"
                HorizontalAlignment="Stretch" />
            <Grid
                Grid.Column="2"
                Grid.ColumnSpan="2"
                Margin="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="1*" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="1*" />
                </Grid.RowDefinitions>
                <GroupBox Header="Custos">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <ToolBar VerticalAlignment="Top">
                            <Button x:Name="adicionarCustoButton" Content="Adicionar Custo..." />
                        </ToolBar>
                        <DataGrid
                            x:Name="custosDataGrid"
                            Grid.Row="1"
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            AutoGenerateColumns="False"
                            Background="{x:Null}"
                            EnableRowVirtualization="True"
                            ItemsSource="{Binding Source={StaticResource custosViewSource}}">
                            <DataGrid.Resources>
                                <ateliex:ConvertItemToIndex x:Key="IndexConverter2" />
                            </DataGrid.Resources>
                            <DataGrid.RowHeaderTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Path=., RelativeSource={RelativeSource AncestorType=DataGridRow}, Converter={StaticResource IndexConverter2}}" />
                                </DataTemplate>
                            </DataGrid.RowHeaderTemplate>
                            <!--<DataGrid.Resources>
                                <Style x:Key="cellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
                                    <Setter Property="Validation.ErrorTemplate">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <StackPanel>
                                                    <AdornedElementPlaceholder x:Name="placeholder" />
                                                    <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                                                        <Grid Background="White">
                                                            <TextBlock Text="{Binding [0].ErrorContent}"/>
                                                        </Grid>
                                                    </Popup>
                                                </StackPanel>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                                <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                                    <Setter Property="Validation.ErrorTemplate">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <StackPanel>
                                                    <AdornedElementPlaceholder x:Name="placeholder" />
                                                    <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                                                        <Grid Background="White">
                                                            <TextBlock Text="{Binding [0].ErrorContent}"/>
                                                        </Grid>
                                                    </Popup>
                                                </StackPanel>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                            -->
                            <!--<Setter Property="Padding" Value="-2"/>
                                        <Style.Triggers>
                                            <Trigger Property="Validation.HasError" Value="True">
                                                <Setter Property="Background" Value="Red"/>
                                                <Setter Property="ToolTip"
                                                    Value="{Binding RelativeSource={RelativeSource Self},
                                                    Path=(Validation.Errors)[0].ErrorContent.Message}"/>
                                            </Trigger>
                                        </Style.Triggers>-->
                            <!--
                                </Style>
                                <Style x:Key="error2Style" TargetType="{x:Type Label}">
                                    <Setter Property="Padding" Value="-2"/>
                                    <Style.Triggers>
                                        <Trigger Property="Validation.HasError" Value="True">
                                            <Setter Property="Background" Value="Red"/>
                                            <Setter Property="ToolTip"
                                                Value="{Binding RelativeSource={RelativeSource Self},
                                                Path=(Validation.Errors)[0].ErrorContent}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                                    <Style.Triggers>
                            -->
                            <!--  Order of these triggers matter as the last one will take precedence  -->
                            <!--
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            -->
                            <!--  When the cell is selected, switching to transparent to let the row's Background be visible  -->
                            <!--
                                <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                            -->
                            <!--<Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                        </Trigger>-->
                            <!--
                                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            -->
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>-->
                            <!--<Setter Property="BorderThickness" Value="1"/>-->
                            <!--
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
                                    <Setter Property="FontWeight"  Value="Bold" />
                                    <Setter Property="Background" Value="#FF4472C4" />
                                    <Setter Property="Foreground" Value="White"/>
                                </Style>
                                <ControlTemplate x:Key="rowValidationErrorTemplate">
                                    <Grid Margin="0,-2,0,-2"
                                        ToolTip="{Binding RelativeSource={RelativeSource
                                            FindAncestor, AncestorType={x:Type DataGridRow}},
                                            Path=(Validation.Errors)[0].ErrorContent}">
                                                    <Ellipse StrokeThickness="0" Fill="Red"
                                            Width="{TemplateBinding FontSize}"
                                            Height="{TemplateBinding FontSize}" />
                                        <TextBlock Text="!" FontSize="{TemplateBinding FontSize}"
                                            FontWeight="Bold" Foreground="White"
                                            HorizontalAlignment="Center" />
                                    </Grid>
                                </ControlTemplate>
                            -->
                            <!--<SolidColorBrush x:Key="alternatingRowBackground" Color="#FFD9E1F2" Opacity="0.5"/>-->
                            <!--
                            </DataGrid.Resources>-->
                            <DataGrid.Columns>
                                <DataGridComboBoxColumn
                                    x:Name="tipoColumn"
                                    Width="Auto"
                                    MinWidth="72"
                                    Header="Tipo"
                                    ItemsSource="{Binding Source={system:EnumBindingSource {x:Type decisoesComerciais:TipoDeCusto}}, Mode=OneWay}"
                                    SelectedValueBinding="{Binding Tipo}" />
                                <DataGridTextColumn
                                    x:Name="descricaoColumn"
                                    Width="*"
                                    MinWidth="72"
                                    Binding="{Binding Descricao}"
                                    Header="Descrição" />
                                <DataGridTextColumn
                                    x:Name="valorColumn"
                                    Width="72"
                                    Binding="{Binding Valor, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="V (R$)" />
                                <DataGridTextColumn
                                    x:Name="percentualColumn"
                                    Width="72"
                                    Binding="{Binding Percentual, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="P (%)" />
                                <DataGridTextColumn
                                    x:Name="valorCalculadoColumn"
                                    Width="72"
                                    Binding="{Binding ValorCalculado, Mode=OneWay, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="VC (R$)" />
                                <DataGridTextColumn
                                    x:Name="percentualCalculadoColumn"
                                    Width="72"
                                    Binding="{Binding PercentualCalculado, Mode=OneWay, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="PC (%)" />
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </GroupBox>
                <GridSplitter
                    Grid.Row="1"
                    Height="5"
                    HorizontalAlignment="Stretch" />
                <GroupBox Grid.Row="2" Header="Tabela de Preços">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <ToolBar VerticalAlignment="Top">
                            <Button
                                x:Name="adicionarModeloButton"
                                Click="AdicionarModeloButton_Click"
                                Content="Adicionar Modelo..." />
                        </ToolBar>
                        <DataGrid
                            x:Name="itensDataGrid"
                            Grid.Row="1"
                            HorizontalContentAlignment="Stretch"
                            VerticalContentAlignment="Stretch"
                            AutoGenerateColumns="False"
                            Background="{x:Null}"
                            CanUserAddRows="False"
                            EnableRowVirtualization="True"
                            ItemsSource="{Binding Source={StaticResource itensViewSource}}">
                            <DataGrid.Resources>
                                <ateliex:ConvertItemToIndex x:Key="IndexConverter3" />
                            </DataGrid.Resources>
                            <DataGrid.RowHeaderTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Path=., RelativeSource={RelativeSource AncestorType=DataGridRow}, Converter={StaticResource IndexConverter3}}" />
                                </DataTemplate>
                            </DataGrid.RowHeaderTemplate>
                            <!--<DataGrid.RowDetailsTemplate>
                                <DataTemplate>
                                    <GroupBox Header="Recursos">
                                        <DataGrid
                                            Height="Auto"
                                            ItemsSource="{Binding ElementName=itensDataGrid, Path=SelectedItem.Modelo.Recursos}"
                                            RowDetailsVisibilityMode="VisibleWhenSelected"
                                            VerticalContentAlignment="Stretch"
                                            HorizontalContentAlignment="Stretch"
                                            EnableRowVirtualization="True"
                                            AutoGenerateColumns="False"
                                        >
                                            <DataGrid.Columns>
                                                <DataGrid
                            xColumn Header="Tipo" SelectedValueBinding="{Binding Tipo}" Width="Auto" MinWidth="72" ItemsSource="{Binding Source={StaticResource TipoDeRecurso}, Mode=OneWay}"/>
                                                <DataGridTextColumn Header="Descrição" Binding="{Binding Descricao}" Width="*" MinWidth="72" />
                                                <DataGridTextColumn Header="C (R$)" Binding="{Binding Custo, StringFormat={}{0:n2}}" Width="72" CellStyle="{StaticResource RightStyle}" />
                                                <DataGridTextColumn Header="Unidades" Binding="{Binding Unidades}" Width="40" CellStyle="{StaticResource RightStyle}" />
                                                <DataGridTextColumn Header="C/U (R$)" Binding="{Binding CustoPorUnidade, Mode=OneWay, StringFormat={}{0:n2}}" Width="72" CellStyle="{StaticResource RightStyle}" />
                                            </DataGrid.Columns>
                                        </DataGrid>
                                    </GroupBox>
                                </DataTemplate>
                            </DataGrid.RowDetailsTemplate>-->
                            <DataGrid.Columns>
                                <!--<DataGridTextColumn x:Name="planoComercialIdColumn" Binding="{Binding PlanoComercialId}" Header="PCI" Width="Auto"/>-->
                                <DataGridTextColumn
                                    x:Name="modeloColumn"
                                    Width="*"
                                    MinWidth="72"
                                    Binding="{Binding Modelo.Nome, Mode=OneWay, StringFormat={}{0:n2}}"
                                    Header="Modelo" />
                                <DataGridTextColumn
                                    x:Name="custoDeProducaoColumn"
                                    Width="72"
                                    Binding="{Binding CustoDeProducao, Mode=OneWay, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="CP (R$)" />
                                <DataGridTextColumn
                                    x:Name="CustoDeProducaoSugeridoColumn"
                                    Width="72"
                                    Binding="{Binding CustoDeProducaoSugerido, Mode=OneWay, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="CPS (R$)" />
                                <DataGridTextColumn
                                    x:Name="margemColumn"
                                    Width="72"
                                    Binding="{Binding Margem, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="M (R$)" />
                                <DataGridTextColumn
                                    x:Name="margemPercentualColumn"
                                    Width="72"
                                    Binding="{Binding MargemPercentual, StringFormat={}{0:n2}, ValidatesOnNotifyDataErrors=True}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="M (%)" />
                                <DataGridTextColumn
                                    x:Name="taxaDeMarcacaoColumn"
                                    Width="72"
                                    Binding="{Binding TaxaDeMarcacao, Mode=OneWay, StringFormat={}{0:n2}, ValidatesOnNotifyDataErrors=True}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="TM" />
                                <DataGridTextColumn
                                    x:Name="precoDeVendaColumn"
                                    Width="72"
                                    Binding="{Binding PrecoDeVenda, Mode=OneWay, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="PV (R$)" />
                                <DataGridTextColumn
                                    x:Name="PrecoDeVendaDesejadoColumn"
                                    Width="72"
                                    Binding="{Binding PrecoDeVendaDesejado, StringFormat={}{0:n2}}"
                                    CellStyle="{StaticResource RightStyle}"
                                    Header="PVD (R$)" />
                                <!--<DataGridTextColumn x:Name="stateColumn1" Binding="{Binding State}" Header="State" IsReadOnly="True" Width="Auto"/>-->
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </GroupBox>
            </Grid>
        </Grid>
        <StatusBar
            Grid.Row="3"
            Grid.ColumnSpan="2"
            VerticalAlignment="Bottom">
            <Label x:Name="statusBarLabel" Content="Pronto." />
        </StatusBar>
    </Grid>
</Window>
